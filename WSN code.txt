#include "WiFi.h"
#include "HTTPClient.h"
#include "DHT.h"
#define DHTTYPE DHT11
#define DHTPIN 15 
#define TDS_PIN 32 
#define PH_PIN 33  
#define WIFI_SSID "SMARTHARVEST"
#define WIFI_PASSWORD "11111111"
#define SERVER_URL "http://192.168.1.11/smartharvest/BACKEND/esp32_data_sender.php"
DHT dht(DHTPIN, DHTTYPE);
float calibration_value = 21.34 - 0.7;
unsigned long int avgval;
int buffer_arr[10], temp;
float ph_act;
void setup() {
  Serial.begin(115200); // Set baud rate for serial communication
  Serial.println("DHT11, TDS, and pH sensor test");
  dht.begin();
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(3000);
    Serial.print(".");
  }
  Serial.println("\nConnected to Wi-Fi");
}

void loop() {
  Serial.println("Reading sensor data...");
  delay(8000); 

  float humidity = dht.readHumidity();
  float temperature = dht.readTemperature();

  if (isnan(humidity) || isnan(temperature)) {
    Serial.println("Failed to read from DHT sensor! Check your wiring and connections.");
  } else {
    Serial.print("Humidity: ");
    Serial.print(humidity);
    Serial.print(" %\t");
    Serial.print("Temperature: ");
    Serial.print(temperature);
    Serial.println(" Â°C");
  }
  int tdsValue = analogRead(TDS_PIN);
  float tdsVoltage = tdsValue * (5.0 / 4095.0); // Convert to voltage (use 5V as the reference for ESP32)
  float tdsPPM = (133.42 * tdsVoltage * tdsVoltage * tdsVoltage - 255.86 * tdsVoltage * tdsVoltage + 857.39 * tdsVoltage) * 0.5; // Example conversion formula
  Serial.print("TDS: ");
  Serial.print(tdsPPM);
  Serial.println(" ppm");
  for (int i = 0; i < 10; i++) {
    buffer_arr[i] = analogRead(PH_PIN);
    delay(30);
  }
  for (int i = 0; i < 9; i++) {
    for (int j = i + 1; j < 10; j++) {
      if (buffer_arr[i] > buffer_arr[j]) {
        temp = buffer_arr[i];
        buffer_arr[i] = buffer_arr[j];
        buffer_arr[j] = temp;
      }
    }
  }
  avgval = 0;
  for (int i = 2; i < 8; i++) {
    avgval += buffer_arr[i];
  }
  float voltage = (float)avgval * 5.0 / 4095 / 6; // ESP32 uses 3.3V and 12-bit ADC
  ph_act = -5.70 * voltage + calibration_value;
  float correctedPhValue = ph_act -0.5;
  Serial.print("Corrected pH Value: ");
  Serial.println(correctedPhValue);
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(SERVER_URL); // Specify the URL
    http.addHeader("Content-Type", "application/x-www-form-urlencoded"); // Specify content-type header
    String postData = "humidity=" + String(humidity) + "&temperature=" + String(temperature) + "&tds=" + String(tdsPPM) + "&ph=" + String(correctedPhValue);
    int httpResponseCode = http.POST(postData);
    if (httpResponseCode > 0) {
      String response = http.getString();
      Serial.println("HTTP Response: " + response);
    } else {
      Serial.println("Error on sending POST: " + String(httpResponseCode));
    }
    // Free resources
    http.end();
  } else {
    Serial.println("Wi-Fi disconnected!");
  }
}